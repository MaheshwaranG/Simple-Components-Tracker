{"version":3,"sources":["App.js","serviceWorker.js","Constants.js","Components/Header.js","services/service.js","Components/SIdeMenus.js","Components/Body.js","routes/AppRoutes.js","reducers/componentDataReducer.js","configuration/store.js","index.js"],"names":["Component","Boolean","window","location","hostname","match","constants","actions","FETCH_ALL_DATA","Header","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","react_default","a","createElement","className","connect","service","postApi","requestURL","data","fetch","concat","URL","method","credentials","headers","Accept","Content-Type","body","then","response","json","getApi","getAllComponentData","console","log","JSON","stringify","SideMenu","Body","SIdeMenus","history","createHistory","AppRouter","react_router","Components_Header","path","component","initialState","allProperties","ComponentData","componentDataReducer","state","arguments","length","undefined","type","Constants","start","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","combineReducers","allData","componentData","applyMiddleware","thunk","jsx","es","AppRoutes","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.90e201be.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Provider } from \"react-redux\";\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\" />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const constants = {\r\n  actions: {\r\n    FETCH_ALL_DATA: \"FETCH_ALL_DATA\"\r\n  }\r\n};\r\n\r\nexport default constants;\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Constants from \"../Constants\";\r\n\r\nclass Header extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n  //   static getDerivedStateFromProps(nextProps, previous) {\r\n  //     console.log(\r\n  //       \" willRecisiver \" +\r\n  //         JSON.stringify(nextProps) +\r\n  //         \"\\n -------------\" +\r\n  //         JSON.stringify(previous)\r\n  //     );\r\n  //     console.log(\r\n  //       \"Example \" + nextProps.auth.isUserLogin + \" ++ \" + previous.isUserLogin\r\n  //     );\r\n  //     let isUserLogin = nextProps.auth.isUserLogin;\r\n  //     return { isUserLogin: nextProps.auth.isUserLogin };\r\n  //   }\r\n  render() {\r\n    return <div className=\"mg-header-label\">Components</div>;\r\n  }\r\n}\r\n\r\nexport default connect()(Header);\r\n","export const service = {\r\n  postApi,\r\n  getApi,\r\n  getAllComponentData\r\n};\r\n\r\nconst URL = \"http://localhost:36987\";\r\n\r\nfunction getAllComponentData() {\r\n  this.getApi(\"/api/getComponentData\").then(data => {\r\n    console.log(JSON.stringify(data));\r\n  });\r\n}\r\n\r\nfunction getApi(requestURL) {\r\n  return fetch(`${URL}${requestURL}`, {\r\n    method: \"GET\",\r\n    credentials: \"omit\",\r\n    headers: {\r\n      Accept: \"application/json\",\r\n      \"Content-Type\": \"application/json\"\r\n    }\r\n  })\r\n    .then(response => response.json())\r\n    .then(data => data);\r\n}\r\n\r\nfunction postApi(requestURL, data) {\r\n  return fetch(`${URL}${requestURL}`, {\r\n    method: \"POST\",\r\n    credentials: \"include\",\r\n    headers: {\r\n      Accept: \"application/json\",\r\n      \"Content-Type\": \"application/json\"\r\n    },\r\n    body: data\r\n  })\r\n    .then(response => response.json())\r\n    .then(data => data);\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { service } from \"../services/service\";\r\n\r\nclass SideMenu extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n  componentDidMount() {\r\n    console.log(\"Sidemenu did mount\");\r\n    service.getAllComponentData();\r\n  }\r\n  render() {\r\n    return <h1> side menus </h1>;\r\n  }\r\n}\r\n\r\nexport default connect()(SideMenu);\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport SideMenu from \"./SIdeMenus\";\r\n\r\nclass Body extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"mg-side-menu\">\r\n          <SideMenu />\r\n        </div>\r\n        <div className=\"mg-content-area\">\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect()(Body);\r\n","import React, { Component } from \"react\";\r\nimport { Router, Route, Switch } from \"react-router-dom\";\r\nimport createHistory from \"history/createBrowserHistory\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"../actions/componentDataAction\";\r\nimport Header from \"../Components/Header\";\r\nimport Body from \"../Components/Body\";\r\nimport { create } from \"domain\";\r\n\r\nexport const history = createHistory();\r\nclass AppRouter extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n  componentDidMount() {\r\n    console.log(\"Router screen DId mount\");\r\n  }\r\n  render() {\r\n    return (\r\n      <Router history={history}>\r\n        <div>\r\n          <div className=\"mg-header\">\r\n            <Header />\r\n          </div>\r\n          <div className=\"mg-content\">\r\n            <Switch>\r\n              <Route path=\"/\" component={Body} />\r\n            </Switch>\r\n          </div>\r\n        </div>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect()(AppRouter);\r\n","import Constants from \"../Constants\";\r\nlet initialState = {\r\n  allProperties: null,\r\n  ComponentData: null\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case Constants.actions.FETCH_ALL_DATA:\r\n      return {\r\n        allProperties: { start: \"Data\" },\r\n        ComponentData: { start: \"COmponenet\" }\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { createStore, combineReducers, applyMiddleware, compose } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport componentData from \"../reducers/componentDataReducer\";\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nexport default () => {\r\n  const store = createStore(\r\n    combineReducers({\r\n      allData: componentData\r\n    }),\r\n    composeEnhancers(applyMiddleware(thunk))\r\n  );\r\n  return store;\r\n};\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport AppRouter from \"./routes/AppRoutes\";\nimport { Provider } from \"react-redux\";\n\nimport configureStore from \"./configuration/store\";\n\nconst store = configureStore();\n\nconst jsx = (\n  <Provider store={store}>\n    <AppRouter />\n  </Provider>\n);\n\nReactDOM.render(jsx, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}